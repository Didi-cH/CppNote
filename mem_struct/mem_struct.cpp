/* 内存对齐是操作系统为了提高访问内存的策略。
操作系统在访问内存的时候，每次读取一定长度(这个长度是操作系统默认的对齐数，或者默认对齐数的整数倍)。
如果没有对齐，为了访问一个变量可能产生二次访问。

1、提高存取数据的速度。比如有的平台每次都是从偶地址处读取数据，
对于一个int型的变量，若从偶地址单元处存放，则只需一个读取周期即可读取该变量；
但是若从奇地址单元处存放，则需要2个读取周期读取该变量。
2、某些平台只能在特定的地址处访问特定类型的数据，否则抛出硬件异常给操作系统。 */


#include <iostream>
using namespace std;

//#pragma pack(show) //查看对齐模数的值 默认8
//#pragma pack(1)  //对齐模数 2的n次方

//内存对齐原则
//第一个属性开始，从0开始计算偏移量
//第二个属性要放在 该属性的大小 与 对齐模数 比 取最小值 的整数倍上
//所有属性计算完毕后，整体做二次偏移。
//将计算结果 扩充到 这个结构体最大数据类型 与 对齐模数 比 取最小值 的整数倍
struct A
{
	int a;		//0~3		//0~3
	char b;		//4~7		//4
	double c;	//8~15		//5~12
	float d;	//16~19		//13~16
};
struct B
{
	char a;		//0~7
	A aa;		//8~31	//拆开 内部最大类型的整数倍
	double c;	//32~39
};

int main()
{
    cout << sizeof(A) << endl;	//24
	cout << sizeof(B) << endl;	//40
    return 0;
}